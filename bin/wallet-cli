#!/usr/bin/env node

'use strict';

process.title = 'wallet-cli';

var async = require('async');
var program = require('commander');
var ProgressBar = require('progress');

var version = require('../package.json').version;
var Client = require('../lib/client');
var Config = require('../lib/config');
var utils = require('../lib/utils');

program
  .version(version)
  .description('Bitcoin Wallet CLI')
  .option('-u, --url <url>', 'Specify the URL for the wallet server.')
  .option('-c, --config <dir>', 'Specify the data directory that has the configuration file.')
  .option('-t, --testnet', 'Use testnet network')
  .option('-r, --regtest', 'Use regtest network')
  .parse(process.argv);

var network = 'livenet';
if (program.testnet) {
  network = 'testnet';
} else if (program.regtest) {
  network = 'regtest';
}

var client;
if (program.config && program.url) {
  throw new Error('--config and --url are mutually exclusive, please use one or the other.');
} else if (program.url) {
  client = new Client({network: network, url: program.url});
} else {
  var config = new Config({network: network});
  var url = config.getURLSync();
  client = new Client({network: network, url: url});
}

program
  .command('createWallet <walletId>')
  .description('Create a new wallet')
  .action(function(walletId) {
    client.createWallet(walletId, function(err, body) {
      if (err) {
        throw err;
      }
      console.log(body);
    });
  });

program
  .command('importAddress <walletId> <address>')
  .description('Import a new address')
  .action(function(walletId, address) {
    client.importAddress(walletId, address, function(err, body) {
      if (err) {
        throw err;
      }
      console.log(body);
    });
  });

program
  .command('importAddresses <walletId> <filepath>')
  .description('Import a new addresses from JSON file')
  .action(function(walletId, filepath) {
    // TODO If the JSON file becomes too large use stream-json module
    // to read as a stream, ~3 million addresses works currently
    utils.readJSONFile(filepath, function(err, addresses) {
      if (err) {
        throw err;
      }
      var total = addresses.length;
      var progress = new ProgressBar('Importing addresses [:bar] :percent :current/:total', {
        complete: '=',
        incomplete: ' ',
        width: 20,
        total: total
      });

      var chunkSize = 2000;
      var chunks = utils.splitArray(addresses, chunkSize);
      async.eachSeries(chunks, function(chunk, next) {
        client.importAddresses(walletId, chunk, function(err, body) {
          if (err) {
            throw err;
          }
          progress.tick(chunkSize);
          next();
        });
      });
    });
  });

program
  .command('getTransactions <walletId> [start] [limit]')
  .description('View latest transactions for a wallet')
  .action(function(walletId, start, limit) {
    var options = {};
    if (start) {
      options.height = start;
      options.index = 0;
    }
    if (limit) {
      options.limit = limit;
    }
    client.getTransactions(walletId, options, function(err, body) {
      if (err) {
        throw err;
      }
      console.log(body);
    });
  });

program
  .command('getTransactionsStream <walletId> [start]')
  .description('View continuous stream of latest transactions for a wallet')
  .action(function(walletId, start) {
    var options = {};
    if (start) {
      options.height = start;
      options.index = 0;
    }
    options.limit = 10;
    var stream = client.getTransactionsStream(walletId, options);
    stream.on('data', function(transactions) {
      console.log(transactions);
    });
  });

program
  .command('getTxids <walletId> [start] [limit]')
  .description('View latest txids for a wallet')
  .action(function(walletId, start, limit) {
    var options = {};
    if (start) {
      options.height = start;
      options.index = 0;
    }
    if (limit) {
      options.limit = limit;
    }
    client.getTxids(walletId, options, function(err, body) {
      if (err) {
        throw err;
      }
      console.log(body);
    });
  });

program
  .command('getTxidsStream <walletId> [start]')
  .description('View continuous stream of latest txids for a wallet')
  .action(function(walletId, start) {
    var options = {};
    if (start) {
      options.height = start;
      options.index = 0;
    }
    options.limit = 500;
    var stream = client.getTxidsStream(walletId, options);
    stream.on('data', function(txids) {
      console.log(txids);
    });
  });

program.parse(process.argv);

if (process.argv.length === 2) {
  program.help();
}
