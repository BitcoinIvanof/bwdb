#!/usr/bin/env node

'use strict';

process.title = 'bwdb-cli';

var async = require('async');
var program = require('commander');
var ProgressBar = require('progress');

var version = require('../package.json').version;
var Client = require('../lib/client');
var Config = require('../lib/config');
var utils = require('../lib/utils');

program
  .version(version)
  .description('Bitcoin Wallet CLI')
  .option('-u, --url <url>', 'Specify the URL for the wallet server.')
  .option('-c, --config <dir>', 'Specify the data directory that has the configuration file.')
  .option('-t, --testnet', 'Use testnet network')
  .option('-r, --regtest', 'Use regtest network')
  .parse(process.argv);

var network;
if (program.testnet) {
  network = 'testnet';
} else if (program.regtest) {
  network = 'regtest';
}

var client;
if (program.config && program.url) {
  throw new Error('--config and --url are mutually exclusive, please use one or the other.');
} else if (program.url) {
  client = new Client({network: network, url: program.url});
  client.connect(main);
} else {
  client = new Client({network: network, configPath: program.config});
  client.connect(main);
}

function main(err) {
  if (err) {
    throw err
  }
  program
    .command('createWallet <walletId>')
    .description('Create a new wallet')
    .action(function(walletId) {
      client.createWallet(walletId, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(body);
      });
    });

  program
    .command('getBalance <walletId>')
    .description('Get the balance of the wallet')
    .action(function(walletId) {
      client.getBalance(walletId, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(body);
      });
    });

  program
    .command('importAddress <walletId> <address>')
    .description('Import a new address')
    .action(function(walletId, address) {
      client.importAddress(walletId, address, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(body);
      });
    });

  program
    .command('importAddresses <walletId> <filepath>')
    .description('Import new addresses from a JSON or Bitcoin wallet.dat file')
    .action(function(walletId, filepath) {
      utils.readWalletFile(filepath, network, function(err, addresses) {
        if (err) {
          throw err;
        }
        var total = addresses.length;
        var progress = new ProgressBar('Importing addresses [:bar] :percent :current/:total', {
          complete: '=',
          incomplete: ' ',
          width: 20,
          total: total
        });

        var chunkSize = 2000;
        var chunks = utils.splitArray(addresses, chunkSize);
        async.eachSeries(chunks, function(chunk, next) {
          client.importAddresses(walletId, chunk, function(err) {
            if (err) {
              throw err;
            }
            progress.tick(chunkSize);
            next();
          });
        });
      });
    });

  program
    .command('getTransactions <walletId> [start] [limit]')
    .description('View latest transactions for a wallet')
    .action(function(walletId, start, limit) {
      var options = {};
      if (start) {
        options.height = start;
        options.index = 0;
      }
      if (limit) {
        options.limit = limit;
      }
      client.getTransactions(walletId, options, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(JSON.stringify(body, null, 2));
      });
    });

  program
    .command('getUTXOs <walletId>')
    .description('View utxos for a wallet')
    .action(function(walletId) {
      var options = {};
      client.getUTXOs(walletId, options, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(JSON.stringify(body, null, 2));
      });
    });

  program
    .command('getTransactionsStream <walletId> [start]')
    .description('View continuous stream of latest transactions for a wallet')
    .action(function(walletId, start) {
      var options = {};
      if (start) {
        options.height = start;
        options.index = 0;
      }
      options.limit = 50;
      var stream = client.getTransactionsStream(walletId, options);
      stream.on('data', function(transactions) {
        console.log(transactions);
      });
    });

  program
    .command('getTransactionsCSV <walletId> <start> <end>')
    .description('View transaction CSV history within block height range')
    .action(function(walletId, start, end) {
      var options = {
        height: start,
        index: 0,
        limit: 10,
        end: end
      };
      var stream = client.getTransactionsCSVStream(walletId, options);
      stream.pipe(process.stdout);
    });

  program
    .command('getTransactionsList <walletId> <start> <end>')
    .description('View transaction list history within block height range')
    .action(function(walletId, start, end) {
      var options = {
        height: start,
        index: 0,
        limit: 10,
        end: end
      };
      var stream = client.getTransactionsListStream(walletId, options);
      stream.pipe(process.stdout);
    });

  program
    .command('getTxids <walletId> [start] [limit]')
    .description('View latest txids for a wallet')
    .action(function(walletId, start, limit) {
      var options = {};
      if (start) {
        options.height = start;
        options.index = 0;
      }
      if (limit) {
        options.limit = limit;
      }
      client.getTxids(walletId, options, function(err, res, body) {
        if (err) {
          throw err;
        }
        console.log(body);
      });
    });

  program
    .command('getTxidsStream <walletId> [start]')
    .description('View continuous stream of latest txids for a wallet')
    .action(function(walletId, start) {
      var options = {};
      if (start) {
        options.height = start;
        options.index = 0;
      }
      options.limit = 500;
      var stream = client.getTxidsStream(walletId, options);
      stream.on('data', function(txids) {
        console.log(txids);
      });
    });

  program.parse(process.argv);

  if (process.argv.length === 2) {
    program.help();
  }
}
